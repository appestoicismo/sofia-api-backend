from flask import Flask, request, jsonify
from flask_cors import CORS
import google.generativeai as genai
import json
import datetime
import os
from collections import defaultdict
import uuid
from dotenv import load_dotenv
import threading
import time

# Carregar vari√°veis de ambiente
load_dotenv()

app = Flask(__name__)
CORS(app)  # Permitir requisi√ß√µes do frontend

class SofiaAPIUltraRapida:
    def __init__(self, api_key):
        genai.configure(api_key=api_key)
        self.model = genai.GenerativeModel('gemini-1.5-flash')
        
        # Estat√≠sticas
        self.stats = {
            "total_conversas": 0,
            "vendas_fechadas": 0,
            "revenue_total": 0.0,
            "tempo_medio_resposta": 0.0
        }
        
        # Arquivos de dados
        self.arquivo_conversas = "sofia_conversas_api.json"
        self.arquivo_stats = "sofia_stats_api.json"
        
        self.carregar_dados()
        
        # Sofia Prompt EXPERT Otimizado
        self.sofia_prompt = """
Voc√™ √© Sofia, uma Mentora Estoica especializada em transforma√ß√£o emocional.

IDENTIDADE: Voc√™ √© uma guia de jornada emocional, n√£o uma vendedora tradicional. Sua miss√£o √© conectar pessoas com ferramentas pr√°ticas de filosofia estoica que podem transformar suas vidas.

REGRAS FUNDAMENTAIS:
1. M√ÅXIMO 1 pergunta por resposta (respeitar pregui√ßa do lead)
2. Sempre validar emo√ß√µes antes de educar
3. Focar na transforma√ß√£o, n√£o no produto
4. Ser emp√°tica mas objetiva
5. Demonstrar valor antes de vender

DIAGN√ìSTICO R√ÅPIDO:
- ANSIEDADE/NERVOSO ‚Üí "O que mais te preocupa ultimamente?" ‚Üí Ferramenta: Valores Pessoais
- CONFUS√ÉO/PERDIDO ‚Üí "Se pudesse mudar como toma decis√µes, o que seria?" ‚Üí Ferramenta: OPD2  
- SOBRECARGA/CANSADO ‚Üí "Como se sente ao final do dia?" ‚Üí Ferramenta: Sistema de Decis√µes
- REATIVO/EXPLOSIVO ‚Üí "Conte sobre uma rea√ß√£o que se arrependeu" ‚Üí Ferramenta: Perfil Comportamental

PERSONAS E ABORDAGENS:
- EXECUTIVO (30-50): Foco em efici√™ncia e resultados pr√°ticos
- JOVEM ANSIOSO (20-35): Foco em autoconhecimento e redu√ß√£o de ansiedade  
- EM TRANSI√á√ÉO: Foco em redescoberta de valores e prop√≥sito
- PAI/M√ÉE: Foco em clareza de valores parentais

CONEX√ïES FILOS√ìFICAS:
- Para ansiedade: "Marco Aur√©lio tamb√©m lidava com ansiedade governando um imp√©rio. Ele praticava 'premedita√ß√£o dos males' para se preparar mentalmente."
- Para decis√µes: "S√™neca criou 4 filtros para decis√µes dif√≠ceis: √â virtuosa? √â necess√°ria? Est√° sob meu controle? Qual o pior que pode acontecer?"
- Para rea√ß√µes: "Epicteto ensinou a 'pausa estoica' - entre est√≠mulo e resposta h√° um espa√ßo onde escolhemos como reagir."

FLUXO DE CONVERSA:
1. ACOLHER: Validar busca e demonstrar compreens√£o
2. DIAGNOSTICAR: 1 pergunta estrat√©gica para identificar dor
3. CONECTAR: Hist√≥ria estoica relevante + apresentar ferramenta
4. DEMONSTRAR: Mostrar valor pr√°tico da ferramenta
5. CONVIDAR: Oferecer experimentar juntos

TRATAMENTO DE OBJE√á√ïES:
- "N√£o tenho tempo": "Quanto tempo gasta se preocupando? 15 minutos podem economizar horas de ansiedade."
- "J√° tentei muitas coisas": "Nossa diferen√ßa √© filosofia testada h√° 2.000 anos. Primeira semana gr√°tis para experimentar."
- "√â caro": "Qual o custo de continuar como est√°? Primeira semana gr√°tis - experimenta antes de pagar."

FERRAMENTAS E BENEF√çCIOS:
- Valores Pessoais (15 min): Descobre valores aut√™nticos, reduz confus√£o sobre prioridades
- OPD2 (30 min): Define prop√≥sito claro usando filosofia estoica
- Sistema de Decis√µes (20 min): Framework para decis√µes r√°pidas e assertivas
- Perfil Comportamental (25 min): Mapeia padr√µes para maior autocontrole

DEMONSTRA√á√ïES PR√ÅTICAS:
"Pense numa decis√£o dif√≠cil atual. O que √© mais importante: seguran√ßa, crescimento, relacionamentos ou autonomia? Sua resposta revela um valor central."

FECHAMENTOS:
- Por coragem: "Vejo coragem para reconhecer que precisa mudar. Que tal darmos o primeiro passo?"
- Por experimenta√ß√£o: "Primeira semana gr√°tis, sem compromisso. O risco √© zero, o potencial imenso."

LINK: Quando apropriado: "üëâ https://pay.kiwify.com.br/iT6ZM5N"

COMPORTAMENTO: Seja consultiva, emp√°tica mas direta. Use sabedoria estoica para conectar e educar. Mantenha presen√ßa consciente em cada intera√ß√£o.
"""

    def carregar_dados(self):
        """Carrega dados persistidos"""
        try:
            if os.path.exists(self.arquivo_stats):
                with open(self.arquivo_stats, 'r', encoding='utf-8') as f:
                    self.stats = json.load(f)
        except:
            pass

    def salvar_dados(self):
        """Salva dados de forma ass√≠ncrona"""
        def salvar():
            try:
                with open(self.arquivo_stats, 'w', encoding='utf-8') as f:
                    json.dump(self.stats, f, ensure_ascii=False, indent=2)
            except:
                pass
        
        threading.Thread(target=salvar, daemon=True).start()

    def resposta_instantanea(self, mensagem):
        """Cache para respostas r√°pidas"""
        mensagem_lower = mensagem.lower().strip()
        
        if any(palavra in mensagem_lower for palavra in ["pre√ßo", "valor", "custa", "quanto"]):
            return "üí∞ O AppEstoicismo custa apenas R$ 19,90/m√™s com 79% OFF! Primeira semana gr√°tis! üéâ\n\nüëâ https://pay.kiwify.com.br/iT6ZM5N", True
        
        return None, False

    def detectar_intencao_compra(self, mensagem, resposta):
        """Detecta sinais de compra"""
        texto = (mensagem + " " + resposta).lower()
        
        sinais_compra = [
            'quero comprar', 'vou comprar', 'aceito', 'vamos come√ßar',
            'onde pago', 'como pago', 'link de pagamento', 'quero o link',
            'vou assinar', 'primeira semana', 'quero testar', 'aceito sim',
            'bora', 'vamos fazer', 'me interessa', 'quero descobrir',
            'me convenceu', 'fazer agora', 'come√ßar hoje'
        ]
        
        return any(sinal in texto for sinal in sinais_compra)

    def gerar_link_pagamento(self):
        """Gera resposta com link de pagamento"""
        return """üéâ Perfeita escolha! Aqui est√° seu acesso:

üëâ https://pay.kiwify.com.br/iT6ZM5N

‚úÖ Primeira semana GR√ÅTIS
‚úÖ Mais de 40 ferramentas pr√°ticas estoicas
‚úÖ Nova ferramenta todo m√™s
‚úÖ Ensinamentos di√°rios no celular
‚úÖ Cancele quando quiser

Assim que finalizar, recebe acesso imediato! Alguma d√∫vida? üòä"""

    def gerar_resposta_inteligente(self, mensagem, contexto=""):
        """Gera resposta usando Gemini"""
        try:
            inicio = time.time()
            
            if contexto:
                prompt = f"{self.sofia_prompt}\n\nContexto: {contexto}\n\nPessoa: {mensagem}\n\nSofia:"
            else:
                prompt = f"{self.sofia_prompt}\n\nPessoa: {mensagem}\n\nSofia:"
            
            response = self.model.generate_content(prompt)
            resposta = response.text.strip()
            
            # Verificar inten√ß√£o de compra
            if self.detectar_intencao_compra(mensagem, resposta):
                resposta = self.gerar_link_pagamento()
                self.registrar_venda()
            
            # Calcular tempo de resposta
            tempo_resposta = time.time() - inicio
            self.stats["tempo_medio_resposta"] = (
                self.stats["tempo_medio_resposta"] + tempo_resposta
            ) / 2
            
            return resposta
            
        except Exception as e:
            return f"Desculpe, tive um problema t√©cnico. Pode repetir? (Erro: {str(e)[:50]})"

    def registrar_venda(self):
        """Registra venda realizada"""
        self.stats["vendas_fechadas"] += 1
        self.stats["revenue_total"] += 19.90
        print(f"üí∞ VENDA REGISTRADA! Total: R$ {self.stats['revenue_total']:.2f}")

    def registrar_conversa(self, mensagem, resposta):
        """Registra conversa de forma ass√≠ncrona"""
        def registrar():
            try:
                self.stats["total_conversas"] += 1
                conversa = {
                    "timestamp": datetime.datetime.now().isoformat(),
                    "mensagem": mensagem,
                    "resposta": resposta,
                    "stats": self.stats.copy()
                }
                
                if os.path.exists(self.arquivo_conversas):
                    with open(self.arquivo_conversas, 'r', encoding='utf-8') as f:
                        conversas = json.load(f)
                else:
                    conversas = []
                
                conversas.append(conversa)
                
                # Manter apenas √∫ltimas 1000 conversas
                if len(conversas) > 1000:
                    conversas = conversas[-1000:]
                
                with open(self.arquivo_conversas, 'w', encoding='utf-8') as f:
                    json.dump(conversas, f, ensure_ascii=False, indent=2)
                    
            except Exception as e:
                print(f"Erro ao salvar conversa: {e}")
        
        threading.Thread(target=registrar, daemon=True).start()

# Inicializar Sofia
API_KEY = os.getenv('GEMINI_API_KEY')
if not API_KEY:
    print("‚ùå ERRO: GEMINI_API_KEY n√£o encontrada")
    exit(1)

sofia = SofiaAPIUltraRapida(API_KEY)
print("‚úÖ Sofia API Ultra-R√°pida iniciada!")

@app.route('/chat', methods=['POST'])
def chat():
    """Endpoint principal do chat"""
    try:
        data = request.get_json()
        mensagem = data.get('mensagem', '').strip()
        contexto = data.get('contexto', '')
        
        if not mensagem:
            return jsonify({
                'erro': 'Mensagem vazia',
                'resposta': 'Como posso te ajudar com o AppEstoicismo?'
            }), 400
        
        # Tentar resposta instant√¢nea primeiro
        resposta_rapida, is_cache = sofia.resposta_instantanea(mensagem)
        
        if resposta_rapida and is_cache:
            sofia.registrar_conversa(mensagem, resposta_rapida)
            sofia.salvar_dados()
            
            return jsonify({
                'resposta': resposta_rapida,
                'tempo_resposta': 0.1,
                'tipo': 'cache',
                'stats': sofia.stats
            })
        
        # Gerar resposta inteligente
        resposta = sofia.gerar_resposta_inteligente(mensagem, contexto)
        
        # Registrar conversa
        sofia.registrar_conversa(mensagem, resposta)
        sofia.salvar_dados()
        
        return jsonify({
            'resposta': resposta,
            'tempo_resposta': sofia.stats["tempo_medio_resposta"],
            'tipo': 'inteligente',
            'stats': sofia.stats
        })
        
    except Exception as e:
        return jsonify({
            'erro': str(e),
            'resposta': 'Desculpe, houve um erro. Pode tentar novamente?'
        }), 500

@app.route('/stats', methods=['GET'])
def stats():
    """Endpoint para estat√≠sticas"""
    return jsonify(sofia.stats)

@app.route('/health', methods=['GET'])
def health():
    """Health check para Railway"""
    return jsonify({
        'status': 'ok',
        'timestamp': datetime.datetime.now().isoformat(),
        'stats': sofia.stats
    })

@app.route('/', methods=['GET'])
def home():
    """P√°gina inicial"""
    return f"""
    <h1>üß† Sofia API Ultra-R√°pida</h1>
    <p>Status: ‚úÖ Online</p>
    <p>Conversas: {sofia.stats['total_conversas']}</p>
    <p>Vendas: {sofia.stats['vendas_fechadas']}</p>
    <p>Revenue: R$ {sofia.stats['revenue_total']:.2f}</p>
    
    <h3>Endpoints:</h3>
    <ul>
        <li>POST /chat - Conversar com Sofia</li>
        <li>GET /stats - Estat√≠sticas</li>
        <li>GET /health - Health check</li>
    </ul>
    """

if __name__ == '__main__':
    port = int(os.environ.get('PORT', 5000))
    print(f"üöÄ Sofia API rodando na porta {port}")
    app.run(host='0.0.0.0', port=port, debug=False)
