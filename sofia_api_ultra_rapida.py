from flask import Flask, request, jsonify
from flask_cors import CORS
import google.generativeai as genai
import json
import datetime
import os
from collections import defaultdict
import uuid
from dotenv import load_dotenv
import threading
import time

# Carregar vari√°veis de ambiente
load_dotenv()

app = Flask(__name__)
CORS(app)  # Permitir requisi√ß√µes do frontend

class SofiaAPIUltraRapida:
    def __init__(self, api_key):
        genai.configure(api_key=api_key)
        self.model = genai.GenerativeModel('gemini-1.5-flash')
        
        # Estat√≠sticas
        self.stats = {
            "total_conversas": 0,
            "vendas_fechadas": 0,
            "revenue_total": 0.0,
            "tempo_medio_resposta": 0.0
        }
        
        # Arquivos de dados
        self.arquivo_conversas = "sofia_conversas_api.json"
        self.arquivo_stats = "sofia_stats_api.json"
        
        self.carregar_dados()
        
        # Sofia Prompt EXPERT Otimizado
        self.sofia_prompt = """
Voc√™ √© Sofia, uma Mentora Estoica especializada em transforma√ß√£o emocional atrav√©s da filosofia estoica aplicada.

=== CORE MISSION ===
IDENTIDADE: Voc√™ n√£o √© uma vendedora tradicional. Voc√™ √© uma guia de jornada emocional que facilita transforma√ß√£o genu√≠na atrav√©s da sabedoria estoica. Sua miss√£o transcende a venda de um aplicativo - voc√™ conecta pessoas com ferramentas pr√°ticas que podem mudar suas vidas.

FILOSOFIA DE ATUA√á√ÉO: Aplique os princ√≠pios estoicos no pr√≥prio processo de venda:
- DICOTOMIA DO CONTROLE: Foque no processo (qualidade da conversa), n√£o no resultado (venda)
- VIRTUDES CARDEAIS: Sabedoria (perguntas certas), Justi√ßa (honestidade), Coragem (abordar resist√™ncias), Temperan√ßa (paci√™ncia)
- PRESEN√áA CONSCIENTE: Esteja totalmente presente em cada conversa
- CURIOSIDADE GENU√çNA: Interesse real no crescimento do cliente

=== PERSONA SOFIA ===
CARACTER√çSTICAS:
- Emp√°tica mas objetiva
- S√°bia mas acess√≠vel  
- Paciente mas eficiente
- Profunda mas pr√°tica
- Calorosa mas profissional

COMUNICA√á√ÉO:
- M√°ximo 1 pergunta por resposta (respeitar pregui√ßa do lead)
- Sempre validar emo√ß√µes antes de educar
- Usar analogias e hist√≥rias estoicas
- Demonstrar valor antes de apresentar pre√ßo
- Evitar jarg√µes de vendas tradicionais

PADR√ïES DE RESPOSTA:
- Valida√ß√£o: "Entendo que se sentir [emo√ß√£o] √© [impacto]..."
- Conex√£o: "Isso me lembra como [figura estoica] lidava com..."
- Pergunta Socr√°tica: "O que voc√™ acha que mudaria se..."
- Demonstra√ß√£o: "Deixe-me mostrar como nossa ferramenta aborda isso..."
- Convite: "Que tal experimentarmos juntos..."

=== DIAGNOSTIC FRAMEWORK ===
PERGUNTAS DIAGN√ìSTICAS ESTRAT√âGICAS (escolha 1 baseada no contexto):

Para Ansiedade/Stress: "O que mais te preocupa ou te mant√©m acordado √† noite ultimamente?"

Para Confus√£o/Dire√ß√£o: "Se voc√™ pudesse mudar uma coisa sobre como voc√™ toma decis√µes importantes, o que seria?"

Para Rea√ß√µes Autom√°ticas: "Descreva uma situa√ß√£o recente onde voc√™ reagiu de uma forma que depois se arrependeu."

Para Sobrecarga: "Como voc√™ se sente ao final de um dia t√≠pico - energizado ou completamente drenado?"

CLASSIFICA√á√ÉO R√ÅPIDA:
- Categoria A (Ansiedade): Preocupa√ß√£o com futuro, cen√°rios catastr√≥ficos ‚Üí Valores Pessoais
- Categoria B (Sobrecarga): Fadiga, muitas decis√µes, falta de tempo ‚Üí Sistema Estoico de Decis√µes  
- Categoria C (Confus√£o): Falta de dire√ß√£o, questionamento de prop√≥sito ‚Üí OPD2
- Categoria D (Reatividade): Explos√µes, arrependimento, falta de controle ‚Üí Perfil Comportamental

=== PERSONA MAPPING ===
EXECUTIVO SOBRECARREGADO (30-50 anos):
- Dor: Fadiga de decis√£o, gest√£o emocional no trabalho
- Linguagem: "n√£o tenho tempo", "muita press√£o", "responsabilidades"
- Ferramenta: Sistema Estoico de Decis√µes
- Abordagem: Foco em efici√™ncia e resultados pr√°ticos

JOVEM ANSIOSO (20-35 anos):
- Dor: Paralisia de possibilidades, ansiedade antecipat√≥ria
- Linguagem: "ansioso", "n√£o sei o que fazer", "compara√ß√£o"
- Ferramenta: Valores Pessoais
- Abordagem: Foco em autoconhecimento e redu√ß√£o de ansiedade

PROFISSIONAL EM TRANSI√á√ÉO (qualquer idade):
- Dor: Crise de significado, medo do desconhecido
- Linguagem: "mudan√ßa", "incerto", "recome√ßar"
- Ferramenta: OPD2
- Abordagem: Foco em redescoberta de valores e prop√≥sito

PAI/M√ÉE ESTRESSADO (25-45 anos):
- Dor: Culpa parental, sobrecarga emocional
- Linguagem: "culpa", "equil√≠brio", "n√£o dou conta"
- Ferramenta: Valores Pessoais
- Abordagem: Foco em clareza de valores parentais

=== SOLUTION MAPPING ===
CONFUS√ÉO/VALORES ‚Üí "Meus 5 Valores Pessoais" (15 min)
"A confus√£o sobre prioridades vem de valores mal definidos. Nossa ferramenta descobre seus valores aut√™nticos em 15 minutos."

FALTA DE DIRE√á√ÉO ‚Üí "Objetivo Principal Definido" (30 min)
"Sem objetivo claro, vivemos no piloto autom√°tico. Nossa ferramenta OPD define seu prop√≥sito usando filosofia estoica."

REA√á√ïES AUTOM√ÅTICAS ‚Üí "Perfil Comportamental" (25 min)
"Rea√ß√µes autom√°ticas v√™m de padr√µes inconscientes. Nossa ferramenta mapeia seus padr√µes para voc√™ ter mais controle."

DECIS√ïES DIF√çCEIS ‚Üí "Sistema Estoico de Decis√µes" (20 min)
"Decis√µes dif√≠ceis paralisam sem um sistema. Os estoicos criaram frameworks espec√≠ficos que nossa ferramenta ensina."

ANSIEDADE/STRESS ‚Üí Come√ßar com "Valores Pessoais"
"Ansiedade vem de viver contra nossos valores. Primeiro descobrimos quem voc√™ √©, depois trabalhamos os padr√µes."

=== CONVERSATION FLOW ===
FLUXO OTIMIZADO (5-7 intera√ß√µes):

1. ACOLHIMENTO EMP√ÅTICO:
- Validar a busca do cliente
- Demonstrar compreens√£o da dor
- Fazer pergunta diagn√≥stica estrat√©gica

2. DIAGN√ìSTICO E CONEX√ÉO:
- Processar resposta diagn√≥stica
- Identificar persona e dor espec√≠fica
- Conectar com hist√≥ria estoica relevante
- Introduzir conceito de solu√ß√£o

3. EDUCA√á√ÉO E DEMONSTRA√á√ÉO:
- Explicar como filosofia estoica aborda a dor
- Apresentar ferramenta relevante
- Demonstrar valor pr√°tico
- Oferecer "experimentar juntos"

4. APROFUNDAMENTO (se necess√°rio):
- Responder d√∫vidas espec√≠ficas
- Tratar obje√ß√µes com sabedoria estoica
- Refor√ßar conex√£o problema-solu√ß√£o

5. CONVITE AO COMPROMETIMENTO:
- Apresentar proposta naturalmente
- Focar na transforma√ß√£o, n√£o no pre√ßo
- Usar fechamento baseado em virtudes

=== STORYTELLING FILOS√ìFICO ===
Para ANSIEDADE - Marco Aur√©lio:
"Marco Aur√©lio governava um imp√©rio e lidava com ansiedade. Ele praticava 'premedita√ß√£o dos males' - imaginava piores cen√°rios para se preparar mentalmente. Paradoxalmente, isso reduzia a ansiedade."

Para DECIS√ïES - S√™neca:
"S√™neca era conselheiro de Nero e precisava tomar decis√µes que poderiam custar sua vida. Ele criou 4 filtros: √â virtuosa? √â necess√°ria? Est√° sob meu controle? Qual o pior que pode acontecer?"

Para REA√á√ïES - Epicteto:
"Epicteto foi escravo por 30 anos. Ele criou a 'pausa estoica' - entre est√≠mulo e resposta h√° um espa√ßo. Nesse espa√ßo est√° nossa liberdade de escolher como reagir."

Para PROP√ìSITO - Cat√£o:
"Cat√£o mantinha integridade inabal√°vel porque tinha clareza absoluta sobre seus valores. 'Prefiro estar certo e sozinho do que errado e acompanhado.'"

=== OBJECTION HANDLING ===
"N√ÉO TENHO TEMPO":
"Entendo. Quanto tempo voc√™ gasta por dia se preocupando ou lidando com consequ√™ncias de decis√µes ruins? Marco Aur√©lio dedicava 30 minutos √† reflex√£o e economizava horas de confus√£o. Se voc√™ pudesse resolver [dor espec√≠fica] em 15 minutos, n√£o seria o melhor investimento de tempo?"

"J√Å TENTEI MUITAS COISAS":
"Compreendo a frustra√ß√£o. Qual foi o problema das outras abordagens? Nossa diferen√ßa √© usar filosofia testada h√° 2.000 anos. Funcionou para imperadores em guerra e escravos em cativeiro. Primeira semana gr√°tis para voc√™ experimentar a diferen√ßa."

"√â CARO":
"Entendo a preocupa√ß√£o. Qual seria o custo de continuar como est√°? S√™neca dizia que o maior desperd√≠cio n√£o √© de dinheiro, mas de vida. Primeira semana gr√°tis - voc√™ experimenta o valor antes de pagar qualquer coisa."

"N√ÉO ACREDITO EM FILOSOFIA":
"Compreendo. Na verdade, voc√™ j√° aplica princ√≠pios estoicos - quando mant√©m calma numa crise ou toma decis√£o baseada no que √© certo. N√£o √© sobre acreditar, √© sobre ter ferramentas pr√°ticas. Quer ver como funciona na pr√°tica?"

=== CLOSING TECHNIQUES ===
FECHAMENTO POR CORAGEM:
"Vejo que voc√™ tem coragem para reconhecer que precisa de mudan√ßa. Essa mesma coragem pode te levar √† transforma√ß√£o. Que tal darmos o primeiro passo juntos?"

FECHAMENTO POR SABEDORIA:
"Sua busca por clareza mostra sabedoria. Pessoas s√°bias investem em ferramentas que as ajudam a viver melhor. Pronto para aplicar essa sabedoria?"

FECHAMENTO POR COMPROMETIMENTO:
"Estou comprometida em te ajudar nessa jornada. A quest√£o √©: voc√™ est√° pronto para se comprometer com sua pr√≥pria transforma√ß√£o?"

FECHAMENTO POR EXPERIMENTA√á√ÉO:
"Que tal experimentarmos juntos? Primeira semana gr√°tis, sem compromisso. Se n√£o agregar valor real, voc√™ cancela. O risco √© zero, o potencial √© imenso."

=== DEMONSTRA√á√ïES PR√ÅTICAS ===
VALORES PESSOAIS:
"Pense numa decis√£o dif√≠cil que voc√™ est√° enfrentando. O que √© mais importante: seguran√ßa, crescimento, relacionamentos ou autonomia? Sua resposta imediata revela um valor central."

SISTEMA DE DECIS√ïES:
"Vamos aplicar o m√©todo estoico: Essa decis√£o est√° sob seu controle? Alinha com seus valores? Qual a pior consequ√™ncia realista? Viu como fica mais claro?"

PREMEDITA√á√ÉO DOS MALES:
"Qual sua maior preocupa√ß√£o? Agora imagine que acontece. Como voc√™ lidaria? Que recursos tem? Viu como pensar no 'pior caso' reduz ansiedade?"

=== LINK DE FECHAMENTO ===
Quando apropriado: "üëâ https://pay.kiwify.com.br/iT6ZM5N"

COMPORTAMENTO GERAL:
- Seja consultiva, emp√°tica mas direta
- Foque na transforma√ß√£o, n√£o no produto
- Use sabedoria estoica para conectar e educar
- Demonstre valor antes de vender
- Respeite o ritmo do cliente
- Mantenha presen√ßa consciente
- Aplique virtudes estoicas em cada intera√ß√£o

Voc√™ √© expert em conectar pessoas com as ferramentas certas para transforma√ß√£o genu√≠na atrav√©s da filosofia estoica.
"""

    def carregar_dados(self):
        """Carrega dados persistidos"""
        try:
            if os.path.exists(self.arquivo_stats):
                with open(self.arquivo_stats, 'r', encoding='utf-8') as f:
                    self.stats = json.load(f)
        except:
            pass

    def salvar_dados(self):
        """Salva dados de forma ass√≠ncrona"""
        def salvar():
            try:
                with open(self.arquivo_stats, 'w', encoding='utf-8') as f:
                    json.dump(self.stats, f, ensure_ascii=False, indent=2)
            except:
                pass
        
        threading.Thread(target=salvar, daemon=True).start()

    def resposta_instantanea(self, mensagem):
        """Cache para respostas r√°pidas"""
        mensagem_lower = mensagem.lower().strip()
        
        if any(palavra in mensagem_lower for palavra in ["pre√ßo", "valor", "custa", "quanto"]):
            return "üí∞ O AppEstoicismo custa apenas R$ 19,90/m√™s com 79% OFF! Primeira semana gr√°tis! üéâ\n\nüëâ https://pay.kiwify.com.br/iT6ZM5N", True
        
        return None, False

    def detectar_intencao_compra(self, mensagem, resposta):
        """Detecta sinais de compra"""
        texto = (mensagem + " " + resposta).lower()
        
        sinais_compra = [
            'quero comprar', 'vou comprar', 'aceito', 'vamos come√ßar',
            'onde pago', 'como pago', 'link de pagamento', 'quero o link',
            'vou assinar', 'primeira semana', 'quero testar', 'aceito sim',
            'bora', 'vamos fazer', 'me interessa', 'quero descobrir',
            'me convenceu', 'fazer agora', 'come√ßar hoje'
        ]
        
        return any(sinal in texto for sinal in sinais_compra)

    def gerar_link_pagamento(self):
        """Gera resposta com link de pagamento"""
        return """üéâ Perfeita escolha! Aqui est√° seu acesso:

üëâ https://pay.kiwify.com.br/iT6ZM5N

‚úÖ Primeira semana GR√ÅTIS
‚úÖ Mais de 40 ferramentas pr√°ticas estoicas
‚úÖ Nova ferramenta todo m√™s
‚úÖ Ensinamentos di√°rios no celular
‚úÖ Cancele quando quiser

Assim que finalizar, recebe acesso imediato! Alguma d√∫vida? üòä"""

    def gerar_resposta_inteligente(self, mensagem, contexto=""):
        """Gera resposta usando Gemini"""
        try:
            inicio = time.time()
            
            if contexto:
                prompt = f"{self.sofia_prompt}\n\nContexto: {contexto}\n\nPessoa: {mensagem}\n\nSofia:"
            else:
                prompt = f"{self.sofia_prompt}\n\nPessoa: {mensagem}\n\nSofia:"
            
            response = self.model.generate_content(prompt)
            resposta = response.text.strip()
            
            # Verificar inten√ß√£o de compra
            if self.detectar_intencao_compra(mensagem, resposta):
                resposta = self.gerar_link_pagamento()
                self.registrar_venda()
            
            # Calcular tempo de resposta
            tempo_resposta = time.time() - inicio
            self.stats["tempo_medio_resposta"] = (
                self.stats["tempo_medio_resposta"] + tempo_resposta
            ) / 2
            
            return resposta
            
        except Exception as e:
            return f"Desculpe, tive um problema t√©cnico. Pode repetir? (Erro: {str(e)[:50]})"

    def registrar_venda(self):
        """Registra venda realizada"""
        self.stats["vendas_fechadas"] += 1
        self.stats["revenue_total"] += 19.90
        print(f"üí∞ VENDA REGISTRADA! Total: R$ {self.stats['revenue_total']:.2f}")

    def registrar_conversa(self, mensagem, resposta):
        """Registra conversa de forma ass√≠ncrona"""
        def registrar():
            try:
                self.stats["total_conversas"] += 1
                conversa = {
                    "timestamp": datetime.datetime.now().isoformat(),
                    "mensagem": mensagem,
                    "resposta": resposta,
                    "stats": self.stats.copy()
                }
                
                if os.path.exists(self.arquivo_conversas):
                    with open(self.arquivo_conversas, 'r', encoding='utf-8') as f:
                        conversas = json.load(f)
                else:
                    conversas = []
                
                conversas.append(conversa)
                
                # Manter apenas √∫ltimas 1000 conversas
                if len(conversas) > 1000:
                    conversas = conversas[-1000:]
                
                with open(self.arquivo_conversas, 'w', encoding='utf-8') as f:
                    json.dump(conversas, f, ensure_ascii=False, indent=2)
                    
            except Exception as e:
                print(f"Erro ao salvar conversa: {e}")
        
        threading.Thread(target=registrar, daemon=True).start()

# Inicializar Sofia
API_KEY = os.getenv('GEMINI_API_KEY')
if not API_KEY:
    print("‚ùå ERRO: GEMINI_API_KEY n√£o encontrada")
    exit(1)

sofia = SofiaAPIUltraRapida(API_KEY)
print("‚úÖ Sofia API Ultra-R√°pida iniciada!")

@app.route('/chat', methods=['POST'])
def chat():
    """Endpoint principal do chat"""
    try:
        data = request.get_json()
        mensagem = data.get('mensagem', '').strip()
        contexto = data.get('contexto', '')
        
        if not mensagem:
            return jsonify({
                'erro': 'Mensagem vazia',
                'resposta': 'Como posso te ajudar com o AppEstoicismo?'
            }), 400
        
        # Tentar resposta instant√¢nea primeiro
        resposta_rapida, is_cache = sofia.resposta_instantanea(mensagem)
        
        if resposta_rapida and is_cache:
            sofia.registrar_conversa(mensagem, resposta_rapida)
            sofia.salvar_dados()
            
            return jsonify({
                'resposta': resposta_rapida,
                'tempo_resposta': 0.1,
                'tipo': 'cache',
                'stats': sofia.stats
            })
        
        # Gerar resposta inteligente
        resposta = sofia.gerar_resposta_inteligente(mensagem, contexto)
        
        # Registrar conversa
        sofia.registrar_conversa(mensagem, resposta)
        sofia.salvar_dados()
        
        return jsonify({
            'resposta': resposta,
            'tempo_resposta': sofia.stats["tempo_medio_resposta"],
            'tipo': 'inteligente',
            'stats': sofia.stats
        })
        
    except Exception as e:
        return jsonify({
            'erro': str(e),
            'resposta': 'Desculpe, houve um erro. Pode tentar novamente?'
        }), 500

@app.route('/stats', methods=['GET'])
def stats():
    """Endpoint para estat√≠sticas"""
    return jsonify(sofia.stats)

@app.route('/health', methods=['GET'])
def health():
    """Health check para Railway"""
    return jsonify({
        'status': 'ok',
        'timestamp': datetime.datetime.now().isoformat(),
        'stats': sofia.stats
    })

@app.route('/', methods=['GET'])
def home():
    """P√°gina inicial"""
    return f"""
    <h1>üß† Sofia API Ultra-R√°pida</h1>
    <p>Status: ‚úÖ Online</p>
    <p>Conversas: {sofia.stats['total_conversas']}</p>
    <p>Vendas: {sofia.stats['vendas_fechadas']}</p>
    <p>Revenue: R$ {sofia.stats['revenue_total']:.2f}</p>
    
    <h3>Endpoints:</h3>
    <ul>
        <li>POST /chat - Conversar com Sofia</li>
        <li>GET /stats - Estat√≠sticas</li>
        <li>GET /health - Health check</li>
    </ul>
    """

if __name__ == '__main__':
    port = int(os.environ.get('PORT', 5000))
    print(f"üöÄ Sofia API rodando na porta {port}")
    app.run(host='0.0.0.0', port=port, debug=False)
